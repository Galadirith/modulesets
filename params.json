{
  "name": "JHBuild Modulesets for LIGO and Open Source Astronomy",
  "tagline": "Module sets and configuration files for building LIGO data analysis software and open source astronomy software with JHBuild",
  "body": "JHBuild modulesets for LIGO and open-source astronomy software\r\n==============================================================\r\n\r\n![parody of XKCD comic](https://raw.github.com/lpsinger/modulesets-website/master/xkcd.png)\r\n\r\n^^ adapted from [XKCD #303, \"Compiling\"](http://xkcd.com/303/)\r\n\r\nThis is my personal collection of JHBuild (<https://live.gnome.org/Jhbuild>)\r\nmodules for automating build and installation of bleeding-edge packages for\r\nLIGO data analysis and open source astronomy.\r\n\r\nAs a taste, installing all of lalsuite and the attendant Python packages\r\none-by-one becomes just:\r\n\r\n    $ jhbuild build lalsuite\r\n\r\nOr, if you'd rather see a progress bar instead of all of the build output,\r\nyou can add the `-q` flag:\r\n\r\n    $ jhbuild build -q lalsuite\r\n\r\nAnd entering the preconfigured shell with `PATH`, `PKG_CONFIG_PATH`,\r\n`PYTHONPATH`, etc. preconfigured is just:\r\n\r\n    $ jhbuild shell\r\n\r\n\r\nInstructions\r\n------------\r\n\r\nTo use, first clone this repository into your home directory under\r\n`~/modulesets` as follows:\r\n\r\n    $ git clone git://github.com/lpsinger/modulesets.git ~/modulesets\r\n\r\nNext, clone and install JHBuild as follows (adapted from\r\n<http://developer.gnome.org/jhbuild/unstable/getting-started.html.en>):\r\n\r\n    $ mkdir -p ~/src && git clone git://git.gnome.org/jhbuild ~/src/jhbuild\r\n    $ cd ~/src/jhbuild\r\n    $ ./autogen.sh\r\n    $ make\r\n    $ make install\r\n\r\nOptionally, add the following line to your login script so that the `jhbuild`\r\ncommand is in your `PATH`:\r\n\r\n    export PATH=$PATH:~/.local/bin\r\n\r\nRemember to log out and log back in for the new environment variable to take\r\neffect. Next, symlink the bundled JHBuild configuration file to\r\n`~/.config/jhbuildrc`:\r\n\r\n    $ mkdir -p ~/.config && cd ~/.config && ln -s ~/modulesets/jhbuildrc\r\n\r\n**_NEW!_ Experimental Support for Intel C Compiler (ICC).**\r\nThere is now experimental support for compiling the LIGO/Virgo software stack\r\n(LALSuite) using the Intel C Compiler (`icc`), which is available on LIGO Data\r\nGrid computing clusters. _To enable building with `icc`, add the line\r\n`icc = True` to your jhbuild configuration script as follows:_\r\n\r\n    $ echo 'icc = True' >> ~/.config/my.jhbuildrc\r\n\r\n**_IMPORTANT!_ Compiler settings for Mac OS/MacPorts (El Capitan).**\r\nFor building LALSuite on [MacPorts](https://www.macports.org), I suggest using\r\nthe GCC 5 compiler toolchain (instead of clang) for full OpenMP support. On Mac\r\nOS, make sure that your MacPorts ports are up to date, and then run the\r\nfollowing commands:\r\n\r\n    $ sudo port install openmpi-gcc5\r\n    $ sudo port select --set gcc mp-gcc5\r\n    $ sudo port select --set mpi openmpi-gcc5-fortran\r\n\r\nFinally, build `lalsuite` with:\r\n\r\n    $ jhbuild build lalsuite\r\n\r\nTo start a shell with your newly built packages in the environment, run:\r\n\r\n    $ jhbuild shell\r\n\r\n\r\nDetails\r\n-------\r\n\r\n- Source code for modules is checked out into `~/src`.\r\n\r\n- For packages that support building out-of-srcdir, the build directory is\r\n  in `/usr1/$USER/build`, `/local/$USER/build`,\r\n  `/localscratch/$USER/build` or `/var/tmp/$USER/build`, to\r\n  accommodate scratch storage locations on LSC data analysis clusters.\r\n\r\n- Packages are installed into `~/local`.\r\n\r\n- You will be reminded whenever you are inside the JHBuild environment shell\r\n  by the colorized prompt beginning with the text `JHBuild:`.",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}